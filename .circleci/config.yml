version: 2.1

jobs:
  preconditions:
    docker: &BUILDIMAGE
      - image: jenkinsrise/cci-v2-components:0.0.4
    steps:
      - run: |
          if [ -z "$COMPONENT_NAME" ]
          then
            echo Component name must be specified as an environment variable.
            exit 1
          fi

  install:
    docker: *BUILDIMAGE
    steps:
      - checkout
      - restore_cache:
          key: node-cache-{{ checksum "package.json" }}
      - run: npm install
      - save_cache:
          key: node-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules

  test:
    docker: *BUILDIMAGE
    steps:
      - checkout
      - restore_cache:
          key: node-cache-{{ checksum "package.json" }}
      - run: npm test

  build:
    docker: *BUILDIMAGE
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: node-cache-{{ checksum "package.json" }}
      - run: |
          VERSION=$(cat version-string/version)
          sed -i "
            s/__VERSION__/$VERSION/;
          " src/rise-image-version.js
      - run: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist

  gcloud-setup:
    docker: &GCSIMAGE
      - image: jenkinsrise/cci-v2-launcher-electron:0.0.6
        environment:
          WIDGETS_BASE: gs://widgets.risevision.com
    steps:
      - run: mkdir -p ~/.ssh
      - run: ssh-keyscan -H github.com >> ~/.ssh/known_hosts
      - run: git clone git@github.com:Rise-Vision/private-keys.git
      - run: mv private-keys ..
      - run: gcloud auth activate-service-account 452091732215@developer.gserviceaccount.com --key-file ../private-keys/storage-server/rva-media-library-ce0d2bd78b54.json
      - persist_to_workspace:
          root: ~/.config
          paths:
            - gcloud

  generate-version:
    docker: *BUILDIMAGE
    steps:
      - run: mkdir version-string
      - run: echo $(date +%Y.%m.%d.%H.%M) > version-string/version
      - persist_to_workspace:
          root: .
          paths:
            - version-string

  deploy-stage:
    docker: *GCSIMAGE
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: node-cache-{{ checksum "package.json" }}
      - run: mkdir -p ~/.config
      - run: cp -r gcloud ~/.config
      - run: |
          VERSION=$(cat version-string/version)
          TARGET=$WIDGETS_BASE/staging/components/$COMPONENT_NAME/$VERSION/
          echo Deploying version $VERSION to $COMPONENT_NAME
          node_modules/common-component/deploy-gcs.sh $COMPONENT_NAME $TARGET

  deploy-production:
    parameters:
      stage:
        type: string
    docker: *GCSIMAGE
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: node-cache-{{ checksum "package.json" }}
      - run: mkdir -p ~/.config
      - run: cp -r gcloud ~/.config
      - run: |
          TARGET=$WIDGETS_BASE/<< parameters.stage >>/components/$COMPONENT_NAME/
          echo Deploying << parameters.stage >> version of $COMPONENT_NAME
          node_modules/common-component/deploy-gcs.sh $COMPONENT_NAME $TARGET

workflows:
  workflow1:
    jobs:
      - preconditions
      - install:
          requires:
            - preconditions
      - gcloud-setup:
          requires:
            - preconditions
          filters:
            branches:
              only:
                - /^(stage|staging)[/].*/
                - master
                - build/stable
      - generate-version:
          requires:
            - preconditions
          filters:
            branches:
              only:
                - /^(stage|staging)[/].*/
                - master
                - build/stable
      - test:
          requires:
            - install
      - build:
          requires:
            - test
            - generate-version
          filters:
            branches:
              only:
                - /^(stage|staging)[/].*/
                - master
                - build/stable
      - deploy-stage:
          requires:
            - gcloud-setup
            - build
          filters:
            branches:
              only:
                - /^(stage|staging)[/].*/
                - master
                - build/stable
      - deploy-production:
          stage: beta
          name: deploy-beta
          requires:
            - deploy-stage
          filters:
            branches:
              only:
                - master
      - deploy-production:
          stage: stable
          name: deploy-stable
          requires:
            - deploy-stage
          filters:
            branches:
              only:
                - build/stable
